# from Crypto.Util.number import inverse
# from math import isqrt
# N=21288402895610225177367506531897690156640309871423489299934697027093264956806728218132849900756535167914475609124691722972965653213896816402158807273306579728484944709405756184498618492371791364297617064429102506493475068599349743655801010148032550872009529223435369388792585736453476531946752253707499989803808532351901380808562924813412498457951392588094943227106501658486048478498916411680124870800065738072153009804102372013399916101255330893459476733284754073771079564771743021981107367280328409505120180685736219871584685131764449527255659186526367278653668065592003014281010550560065109123039573980427897417649
# e=65537
# c=18916939600082560055045284832577631205781163463583170466346436746023272298729066467199993911356786123528799786986284191914614775814961387279095823964555500424574059920785531798054270233812308215705480042521443613959052941082074913491570388459030630182785713376891716027437095139130548712944546316698456117872091891909829627468240131902596893675233304248306760240968998658709955708697217208598273110994271414036311004007654869470181611925440736764400903515642552763280019996262324386362071604620320938058112447903863119457307056806901178673044240668161158296646171844186416888439219726567548741450881279419820189771865


# p = q = isqrt(N) # Factor N


import math

# Function to find the Floor
# of square root of a number
def sqrtF(x):
	# if x is less than 0
	if x < 0:
		raise ValueError("Negative argument.")
	
	# if x==0 or x==1
	if x == 0 or x == 1:
		return x
	
	y = x // 2
	
	# run a loop
	while y > x // y:
		y = (x // y + y) // 2
	
	return y

# function to find the Ceil
# of square root of a number
def sqrtC(x):
	y = sqrtF(x)

	if x == y * y:
		return y
	else:
		return y + 1

# Fermat factorisation
def FermatFactors(n):
	# if n%2 ==0 then return the factors
	if n % 2 == 0:
		return str(n // 2) + ", 2"
	
	# find the square root
	a = sqrtC(n)
	
	# if the number is a perfect square
	if a * a == n:
		return str(a) + ", " + str(a)
	
	# else perform factorisation
	while True:
		b1 = a * a - n
		b = sqrtF(b1)
		
		if b * b == b1:
			break
		else:
			a += 1
	
	return str(a - b) + ", " + str(a + b)

# Driver code
if __name__ == "__main__":
	N = "21288402895610225177367506531897690156640309871423489299934697027093264956806728218132849900756535167914475609124691722972965653213896816402158807273306579728484944709405756184498618492371791364297617064429102506493475068599349743655801010148032550872009529223435369388792585736453476531946752253707499989803808532351901380808562924813412498457951392588094943227106501658486048478498916411680124870800065738072153009804102372013399916101255330893459476733284754073771079564771743021981107367280328409505120180685736219871584685131764449527255659186526367278653668065592003014281010550560065109123039573980427897417649"

	print(FermatFactors(int(N)))
# This code is contributed by sarojmcy2e
